# Git Exam

## Theory

:::{admonition} Instructions
Answer the below questions with short (a few sentences) answers. Keep your answers as precise and concise as possible.

Send your answers as an email, with one blank line in between answers to each question, to
[Dev School Leads](mailto:Development%20School%20Leads%20%3Cdevschoolleads%40imc%2Ecom%3E?subject=Pre%2Dwork%20Git%20theory%20exam%20submission)
(devschoolleads@imc.com) with the subject "Pre-work Git theory exam submission".
:::

1. What do `git add` and `git commit` do?
2. What is a commit in Git? What are the components of a commit?
3. What is a branch in Git? What is the purpose of branches?
4. What does it mean for a commit to have more than one parent?
5. How do you merge changes from branch A into branch B? What does this mean? What happens
   to each branch?
6. How do you cherry-pick a change onto branch A? What does this mean? What happens when you do this?
7. How do you rebase changes from branch `A` on top of branch `B`? What does this mean? What happens to each branch?
8. What is a 'merge conflict' in Git? What operations can result in a merge conflict? How are merge conflicts resolved?
9. What is a fast-forward merge?
10. What is a 'remote' in Git? What is 'origin'?
11. What is the difference between `git pull` and `git fetch`?
12. What is the difference between a tag and a branch?
13. What are the most common use cases for tags?
14. What is a "commit-ish"? What are a few examples of a "commit-ish"?
15. What is the difference between `HEAD` and a "head" (such as `refs/heads/master`)?
16. What is "Detached HEAD mode"? How do you get into detached HEAD mode? How do you get out of detached HEAD mode?
17. If you find a bug in code that you know was working at some point in the past, but isn't working now, how would you
    find the commit where a bug was introduced?
18. How do you check out the code for an arbitrary past commit so that you can debug it?
19. What does rewriting history mean? What is a typical reason you will rewrite history?
20. What is the difference between reverting a commit and deleting it?
21. What is the difference between `git checkout 29f5e54` and `git reset 29f5e54`?
22. How do you delete the most recent commit from a branch?
23. How do you delete an older commit from a branch's history?
24. When should you not rewrite history? What can go wrong when you modify history?
25. If you `git commit --amend` a commit, how can you recover the previous version of that commit?
26. What is the `reflog`? When would you use it?

## Practical

:::{admonition} Instrucitons
Clone the repository from
[`https://github.com/imc-trading/devschool-git-exam`](https://github.com/imc-trading/devschool-git-exam) and then
complete the following steps.

When you are done, zip up your repository and send it, along with the answers to each question, with a blank line in
between each answer, to
[Dev School Leads](mailto:Development%20School%20Leads%20%3Cdevschoolleads%40imc%2Ecom%3E?subject=Pre%2Dwork%20Git%20practical%20exam%20submission)
(devschoolleads@imc.com) with the subject "Pre-work Git practical exam submission".
:::

1. Check out the branch `resume`. Change the commit message from "Add Wok Experience" to
   "Add Work Experience". What commands did you run?

2. Add this "Work Experience" item in "Resume.md":

```
### The Normal Brand

- Web Developer -- 2019-2021
  - Implemented OAuth login process to support Social Login.
  - Added web analytics
```

Commit it on the branch `resume` with the message "Add Normal Brand item". What command(s) did you run?

3. The commit on the branch `resume` with the message "fill edu" has some issues. Fix it like this: 1. Change the
   message to "Add content for Education section". 2. The commit has introduced some whitespaces at the end of two lines.
   Remove those. What command(s) did you run? Explain your actions.

4. The commit with the message "Add empty lines" is not useful. Remove it from the history. What command(s) did you run?

5. There is a branch called `skills`. How can you show the content of the `Resume.md` file on that branch without
   switching to the branch?

6. On the branch `skills` there is a commit called "Add skills". Add that commit on top of the branch `resume` without
   switching branches away from `resume`. That should create a conflict. Fix it by incorporating both the previous and
   the new changes. What commands and actions did you do?

7. In `Resume.md` there is a line `### Illinois State University`. How can you find out what is the last commit that
   changed/introduced that line? What is the message of that commit? What commands did you run?

8. Create a branch called `letter_of_intent` forking off from the branch `job_applications`. Create a file there called
   `letter.txt` with the content `I need this job, please!`. Commit this file on the `letter_of_intent` branch with
   the commit message `Add letter of intent`. Add another commit that adds this line to `letter.txt`:
   `Sincerely yours, Norman`. Commit it with the message `Sign letter`. What commands did you run?

9. Rebase the `letter_of_intent` onto the `resume` branch without including the commits on the
   `job_applications` branch. Basically add the commits `Add letter of intent` and `Sign letter` on top of `resume`
   without changing `resume` and point `letter_of_intent` to the last commit. Do not use `cherry-pick`.
   What command did you run?

10. Merge the branch `letter_of_intent` into the branch `resume`. What commands did you run? Explain the merge strategy
    taken.

11. Merge the `job_applications` branch into the branch `resume`. What commands did you run? What merge strategy was
    taken? What happened to the git history of the `resume` branch?

