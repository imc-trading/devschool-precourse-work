# Libraries Exam

:::{admonition} Instructions
Answer the below questions with short (a few sentences) answers. Keep your answers as precise and concise as possible.

Send your answers and your solution to practical exam (either a godbolt link or as a attached cpp file) as an email, with one blank line in between answers to each question, to
[Dev School Leads](mailto:Development%20School%20Leads%20%3Cdevschoolleads%40imc%2Ecom%3E?subject=Pre%2Dwork%20Git%20theory%20exam%20submission)
(devschoolleads@imc.com) with the subject "Pre-work C++ Libraries exam submission".
:::

## Theory

1. Can you list the STL containers that store elements in contiguous memory?
2. What does the "end" iterator of a range point to?
3. You have an iterator `auto it = container.end()`. What happens if you do `it++` and continue using the iterator?
4. What is iterator invalidation?
5. What is an iterator category?
6. Are pointers iterators? Do pointers have an iterator category?
7. What is the algorithmic complexity of `std::lower_bound`?
8. What are some good reasons to use STL algorithms?

## Practical

A crazed explorer is in search of a treasure. They think the clues are hidden in a secret program given below ([godbolt link](https://godbolt.org/z/cK3qM7zv8)). They are struggling to decipher the program. **Can you help them understand the program better by using C++ STL algorithms and containers?**

**Bonus: If you can find a test case that outputs all 3 answers, then add it as test_case_4 to your solution as well.**

```cpp
#include <iostream>
#include <cstdlib>

bool g(int* a, int n, int s) {
    for (int i = 0; i < n; ++i) {
        if ((a[i] % s) == 0) {
            return true;
        }
    }
    return false;
}

int test_case_1[100] = {41,4,5,6,7,21,9,10,11,12,37,14,15,16,17,42,19,20,21,22,67,24,25,26,27,61,29,30,31,32,97,34,35,36,37,81,39,40,41,42,127,44,45,46,47,101,49,50,51,52,157,54,55,56,57,121,59,60,61,62,187,64,65,66,67,141,69,70,71,72,217,74,75,76,77,161,79,80,81,82,247,84,85,86,87,181,89,90,91,92,277,94,95,96,97,201,99,100,101,102};
int test_case_2[100] = {1,2,3,4,5,1,6,8,1,8,10,4,12,7,10,7,2,18,2,11,17,4,20,11,23,21,27,22,6,2,26,7,9,14,14,33,4,12,3,9,15,6,4,22,35,19,1,6,35,35,9,3,32,12,4,49,12,49,31,13,37,24,25,13,52,64,59,30,26,49,27,66,39,17,56,31,67,43,17,23,39,5,25,21,20,57,60,24,76,65,90,91,82,3,75,22,74,94,79,29};
int test_case_3[100] = {33,75,79,54,66,88,18,97,20,35,48,25,52,9,0,84,92,36,39,49,22,93,85,96,68,87,21,81,43,59,63,28,34,42,83,53,30,53,50,3,41,51,80,93,60,80,29,4,16,68,53,91,61,91,39,81,30,12,14,25,71,78,54,6,20,89,59,3,42,61,6,35,12,86,80,25,67,9,81,35,77,87,78,90,78,18,72,60,30,38,86,2,16,40,60,89,29,71,92,23};

int main() {
    int n = 100;
    int* a = test_case_1;
    int* b = (int*) malloc(n * sizeof(int));
    int* c = (int*) malloc(n * sizeof(int));
    long d = 0;
    long e = 0;
    long f = 0;
    if (g(a, n, 42)) {
        std::cout << "Found first answer" << std::endl;
    }
    for (int i = 0; i < n - n/2; ++i) {
        b[i] = a[n/2 + i];
    }
    for (int i = 0; i < n/2; ++i) {
        b[n - n/2 + i] = a[i];
    }
    for (int i = 0; i < n; ++i) {
        c[i] = b[i] - a[i];
    }
    if (g(c, n, 42)) {
        std::cout << "Found second answer" << std::endl;
    }
    for (int i = 0; i < n; ++i) {
        d += a[i];
        e += b[i];
        f += c[i];
    }
    if (((d + e + f) % 42) == 0) {
        std::cout << "Found third answer" << std::endl;
    }
    std::cout << "End" << std::endl;
}

```