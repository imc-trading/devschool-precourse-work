# Helm

## Checklist

### Essential Concepts

You should have a solid understanding of the following concepts. We've included some follow-up questions and related
concepts under each point.

* What is Helm and why use it?
* Charts
  * Chart Structure
  * Chart Dependencies
* Repositories
* Releases

### Practical Skills

You must be able to do the following:

* Read simple Helm Charts
* Create a simple Helm Chart from scratch
* Deploy a Helm Chart

## LinkedIn Learning

If you already have an IMC laptop and have access to LinkedIn Learning, watch this course:

* [Kubernetes: Package Management With Helm](https://www.linkedin.com/learning/kubernetes-package-management-with-helm)

## Tutorial
If you do **not** have access to LinkedIn Learning, read this K8s tutorial. It is an adaptation of the course above.

### Prerequisites

* K8s pre-work:
    * K8s foundations: deployments, services, configmaps, pods.
* Access to a K8s cluster, e.g., minikube
* Know basic Unix commands: mkdir, cd, mv
* A text editor

### Introduction to Helm

#### What is Helm?

Helm is the package management system for K8s, just like npm is for Node.js and apt-get is for Debian.
Without Helm, deploying an application to K8s means copying and pasting lots of yaml files and
running `kubectl apply -f` over and over again to create deployments, services, pods, etc.

Helm allows packaging all the K8s objects needed for an application and installing them with one command.
You can also version charts, upgrade them, debug deployments, roll back as needed. Helm allows you to configure
a chart, so you can deploy the same application in different environments with different sets of values.

Many open-source applications, like Mysql or Datadog, have readily available Helm charts that you can customize and
easily deploy to your K8s cluster.

#### Installing Helm

Use the [Helm documentation](https://helm.sh/docs/intro/install/) to install Helm on your machine.

### Install and Configure a Chart from Helm Hub

#### Explore the Helm Hub

Go to the [Helm Hub](https://artifacthub.io/) and scroll around. Can you recognize any of the apps? For examples, search
for the `nginx-ingress` [chart](https://artifacthub.io/packages/helm/nginx/nginx-ingress). It deploys the nginx ingress
controller in your cluster. Open the chart's webpage and look around. The chart has a list of prerequisites, e.g.,
requires a K8s version that supports the
Ingress Controller and at least Helm 3.0. Below we find instructions about how to install and uninstall the chart, and
a list of values we can use to configure the chart. We can see the chart versions, the maintainers, and the source
code location for the Helm chart.

#### Install a third party Helm chart

A popular chart to install on K8s clusters is: `kube-state-metrics`. It collects data about the K8s objects in that
cluster (nodes, pods, deployments, etc) and monitors resource usage. Search it up in the Helm Hub and pick the one from
Bitnami. Bitnami is a company which maintains many high-quality Helm charts for widely used open-source applications.

In order to install this chart, we first need to add the Bitnami chart repo to our Helm, and fetch all the charts from
Bitnami. Then we ensure that the repo was properly added.

```shell
$ helm repo add bitnami https://charts.bitnami.com/bitnami
$ helm repo update
$ helm repo list
NAME    URL                               
bitnami https://charts.bitnami.com/bitnami
```

Now we'll install the chart. Helm will install in the cluster to which your `kubectl` is pointing to. If you started
Minikube, your `kubectl` is pointing to the Minikube cluster, thus Helm will install there as well.

First, let's create a new namespace:

```shell
$ kubectl create namespace metrics
```

Let's install the chart in our new namespace:

```shell
$ helm install kube-state-metrics bitnami/kube-state-metrics -n metrics
NAME: kube-state-metrics
...
To access kube-state-metrics from outside the cluster execute the following commands:

    echo "URL: http://127.0.0.1:9100/"
    kubectl port-forward --namespace metrics svc/kube-state-metrics 9100:8080
```

An installation of a Helm chart is called a release.
The command above means: we installed the chart `kube-state-metrics` from the `bitnami` repo under the release name
`kube-state-metrics`. Now do the port forwarding as suggested in the output above.

```shell
$ kubectl port-forward --namespace metrics svc/kube-state-metrics 9100:8080
```

And now open [http://127.0.0.1:9100/](http://127.0.0.1:9100/) in the browser. That should show a Web page with links
to a lot of metrics. These metrics can be sent to a monitoring service, like Prometheus, and get alerts when the
cluster is not healthy.

Good stuff! You have deployed a Helm chart.

#### Inspect a chart in your K8s cluster

Let's list the installed chart:

```shell
$ helm ls -n metrics                  
NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                           APP VERSION
kube-state-metrics      metrics         1               2024-02-02 15:41:37.203101 +0100 CET    deployed        kube-state-metrics-3.11.3       2.10.1 
```

Since it's the first time we install this chart, it has the revision `1`. If you reinstall it, the revision will
be incremented. Let's drill deeper and see what K8s objects have been created by this chart. A simple way is to see all
the objects in the namespace, since this is the only thing installed there:

```shell
$ kubectl get all -n metrics
NAME                                      READY   STATUS    RESTARTS   AGE
pod/kube-state-metrics-86d5bb5bb7-bvm92   1/1     Running   0          8m24s

NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/kube-state-metrics   ClusterIP   10.100.80.130   <none>        8080/TCP   8m24s

NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/kube-state-metrics   1/1     1            1           8m24s

NAME                                            DESIRED   CURRENT   READY   AGE
replicaset.apps/kube-state-metrics-86d5bb5bb7   1         1         1       8m24s
```

It has created a pod, a service, a deployment, and a replica set that determines the number of pods we're running. Let's
look at the pod logs:

```shell
$ kubectl logs kube-state-metrics-86d5bb5bb7-bvm92 -n metrics
I0202 14:41:37.380005       1 wrapper.go:120] "Starting kube-state-metrics"
...
```

Without Helm, we would've had to create all those yaml files for all these K8s objects. Helm makes this process faster
and more reliable.

#### Try Helm show commands

Normally when installing a Helm chart, you want to customize it. For that you need to inspect it to see what
configuration there is. You can read the documentation on the Helm Hub, but if that is missing, you can show the
internals of the chart. You can use `helm show`. It has four subcommands, which you can read more about in
the `helm show help`: `all`, `chart`, `readme`, `values`. Try running:

```shell
$ helm show chart
```

That will show a description of the chart, the maintainers, where to find the code, etc. All this is also on the Helm
Hub page of the chart. One thing you cannot see in Helm Hub is the values file:

```shell
$ helm show values bitnami/kube-state-metrics > values.yaml
```

This shows all the values you can change to configure this chart and their default values. Open it by opening a
text editor that can highlight yaml files to make it more readable. You can see there things like: the default number of
replicas is 1, the service listens on port 8080, there is a liveness probe defined, etc.

If you want to customize your chart, you can change a value in this file and update the chart.

#### Updating a Helm Chart

As an application releases a new version, likely a new Helm chart version will be released as well. Let's look at the
current version of our chart again:

```shell
$ helm ls -n metrics
NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                           APP VERSION
kube-state-metrics      metrics         1               2024-02-02 15:41:37.203101 +0100 CET    deployed        kube-state-metrics-3.11.3       2.10.1   
```

There are two versions:

* chart version - this is the version of the Helm chart
* app version - the version of the underlying code that gets installed as a pod or set of pods

Sometimes we don't want the latest version of a chart, since it might be incompatible with the rest of our applications.
Let's say we want to downgrade to the version `3.11.2`. We can do that with the helm upgrade command:

```shell
$ helm upgrade kube-state-metrics bitnami/kube-state-metrics --version 3.11.2 -n metrics
```

The command means: I want to upgrade the already installed `kube-state-metrics` chart to the chart `kube-state-metrics`
chart from the `bitnami` repo with the version `3.11.2` in the namespace `metrics`. Let's look at the K8s objects:

```shell
$ kubectl get all -n metrics
NAME                                     READY   STATUS    RESTARTS   AGE
pod/kube-state-metrics-c9849cb4f-x8crw   1/1     Running   0          2m53s

NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/kube-state-metrics   ClusterIP   10.100.80.130   <none>        8080/TCP   65m

NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/kube-state-metrics   1/1     1            1           65m

NAME                                            DESIRED   CURRENT   READY   AGE
replicaset.apps/kube-state-metrics-86d5bb5bb7   0         0         0       65m
replicaset.apps/kube-state-metrics-c9849cb4f    1         1         1       2m53s
```

The service and the deployment did not change, whereas a new pod and replica set were created.

### Deploy an Application Using Helm

#### Create a new Helm chart from the command line

So far we learned how to install a third-party chart. But what if we have developed an application and want to
deploy it to K8s. These are the steps:

* create a Docker image containing the app
* define a Helm chart template defining the desired K8s object to be deployed

Let's start by generating a template Helm chart from the command line. Let's make a new directory and go there:

```shell
$ mkdir helm-course && cd helm-course
```

How let's create a chart called `first-chart` and show what was created:

```shell
$ helm create first-chart
Creating first-chart
$  tree
.
└── first-chart
    ├── Chart.yaml
    ├── charts
    ├── templates
    │   ├── NOTES.txt
    │   ├── _helpers.tpl
    │   ├── deployment.yaml
    │   ├── hpa.yaml
    │   ├── ingress.yaml
    │   ├── service.yaml
    │   ├── serviceaccount.yaml
    │   └── tests
    │       └── test-connection.yaml
    └── values.yaml
```

These boilerplate files are the starting point for us to deploy our application.

#### Explore the Helm chart directories and files

The file describing the chart is `Chart.yaml`. It has some predefined key values, like API version, chart name and
description, chart type `application` (as opposed to `library`), the chart version, and the underlying application
version. This metadata can be passed into the Helm templating engine.

The other top level file is `values.yaml`. Here we see lots of key value pairs, that can be used to configure the
container(s) running in pod(s) and other K8s objects. To a large extent, it's up to you what you put in here.

The `charts` directory is where you can store sub-charts that are dependencies of the top level chart. Sometimes
these are third party charts. Other times they are `library` charts (as we saw in the `type` in `Chart.yaml`).

The most exciting one is the `templates` directory. That contains the `NOTES.txt` file, which will be displayed
in the terminal when someone installs the chart. Here is the first time we see the Helm templating system, e.g.:

```
1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
...
```

All the files in the `template` directory are sent through the Helm templating system, where the values from the
`values.yaml` are passed in and these templates get converted to familiar K8s objects. The boilerplate Helm chart comes
with deployment, ingress, service, and serviceaccount files. In `service.yaml` we can see a familiar K8s service object,
but some values are dynamically created with Helm templates. For example:

```shell
$ cat templates/service.yaml 
...
metadata:
  name: {{ include "first-chart.fullname" . }}
...
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
...
```

The value of the name is determined by the value of `first-chart.fullname`. This value is created in the `_helpers.tpl`
file. The comment there explains what the method `first-chart.fullname` does:

```shell
$ cat template/_helper.tpl
...
{{/*                                                                                        
Create a default fully qualified app name.                                                  
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.                         
*/}}                                                                                        
{{- define "first-chart.fullname" -}}                                                       
{{- if .Values.fullnameOverride }}                                                          
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}                                 
{{- else }}                                                                                 
{{- $name := default .Chart.Name .Values.nameOverride }}                                    
{{- if contains $name .Release.Name }}                                                      
{{- .Release.Name | trunc 63 | trimSuffix "-" }}                                            
{{- else }}                                                                                 
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}                       
{{- end }}                                                                                  
{{- end }}                                                                                  
{{- end }} 
...
```

Back to `service.yaml`. `type` and `ports` are coming from the `values.yaml` files because they start with
`.Values.`. Specifically, they take the values `service.type` (i.e., `ClusterIP`) and `service.port` (i.e., `80`)
respectively.

#### Deploy and update a Kubernetes ConfigMap via Helm

A ConfigMap is a K8s object that stores non-sensitive data used by pods, like port numbers and environment
variables. Let us deploy a ConfigMap with Helm. First, check if Helm generates a `templates/configmap.yaml`
file.

It does not. It does not mean we cannot add one. The current files in the `templates` directory are nice and all
to give us a taste of K8s objects that you can add in a Helm chart, but as a starting point we'll create a smaller
chart that only has a ConfigMap. So let's remove all the files from that directory and create a ConfigMap file.

```shell
$ rm -r templates/*
$ touch templates/cm.yaml
```

Add this to `cm.yaml`:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: first-chart-configmap
data:
  port: "8080"
```

This ConfigMap is called `first-chart-configmap` and it stores the key value pair of port 8080. Now let's install
the current directory with Helm.

```shell
$ helm install first-chart .
NAME: first-chart
LAST DEPLOYED: Sat Feb  3 16:44:00 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
```

It has been installed under the release name `first-chart` in the namespace `default`. Let's confirm that by inspecting
the deployed config maps.

```shell
$ kubectl get cm   
NAME                    DATA   AGE
first-chart-configmap   1      76s
$  kubectl describe cm first-chart-configmap
Name:         first-chart-configmap
Namespace:    default
...
Data
====
port:
----
8080
...
```

Great! It's there and it contains the right data. Let's add another key value to our `cm.yaml`: `allowTesting: "true"`.

```yaml
...
data:
  port: "8080"
  allowTesting: "true"
```

Before we deploy the change to the K8s cluster, we can view the change locally by running:

```shell
$ helm template first-chart .
---
## Source: first-chart/templates/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: first-chart-configmap
data:
  port: "8080"
  allowTesting: "true"
```

It looks good. So let's upgrade the chart on the K8s cluster:

```shell
$ helm upgrade first-chart .
Release "first-chart" has been upgraded. Happy Helming!
NAME: first-chart
LAST DEPLOYED: Sat Feb  3 16:51:58 2024
NAMESPACE: default
STATUS: deployed
REVISION: 2
TEST SUITE: None
```

As you can see the revision has gone up to `2`. Let's describe the ConfigMap again to see if our new value
was added:

```shell
$ kubectl describe cm first-chart-configmap
...
Data
====
allowTesting:
----
true
port:
----
8080
...
```

Great! `allowTesting` is there! We've just learned how to deploy a config map with Helm.

#### Deploy and update a Kubernetes secret via Helm

K8s secrets store sensitive information like passwords and SSH keys. Let's create a `templates/secret.yaml` file with
this content:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: first-secret
type: Opaque
data:
  username:
  password:
```

The `username` we want to use is `admin` and the `password`: `4w572$9sns1&!`. Before we put these in the secret, we
have to encode them with `base64`:

```shell
$ echo -n 'admin' | base64
YWRtaW4=
$ echo -n '4w572$9sns1&!' | base64
NHc1NzIkOXNuczEmIQ==
```

Let's paste those values in `secret.yaml`:

```yaml
...
data:
  username: YWRtaW4=
  password: NHc1NzIkOXNuczEmIQ==
```

Let's process our chart through the Helm template processor and see the K8s objects we get:

```shell
$ helm template first-chart .
---
## Source: first-chart/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: first-secret
type: Opaque
data:
  username: YWRtaW4=
  password: NHc1NzIkOXNuczEmIQ==
---
## Source: first-chart/templates/cm.yaml
...
```

Now we can see both the config map and the secret object. Let's deploy the chart and inspect the secret:

```shell
$ helm upgrade first-chart . 
$ kubectl get secrets
NAME                                TYPE                 DATA   AGE
first-secret                        Opaque               2      43s
sh.helm.release.v1.first-chart.v1   helm.sh/release.v1   1      23m
sh.helm.release.v1.first-chart.v2   helm.sh/release.v1   1      15m
sh.helm.release.v1.first-chart.v3   helm.sh/release.v1   1      43s
$ kubectl describe secret first-secret
Name:         first-secret
Namespace:    default
Labels:       app.kubernetes.io/managed-by=Helm
Annotations:  meta.helm.sh/release-name: first-chart
              meta.helm.sh/release-namespace: default

Type:  Opaque

Data
====
password:  13 bytes
username:  5 bytes
```

We don't see the exact secret data, but we see the number of bytes, which is what we expect. Great! Yet another
K8s object type deployed by you with Helm.

#### Roll back a Helm release

Sometimes it happens that you release a version of your application that breaks in an unexpected way. Usually the
best course of action is to quickly roll back that version. First you need to decide which version do you want to
roll back to: the previous one or something older. You can see the history of your installed helm chart revisions
by running:

```shell
$ helm history first-chart
REVISION        UPDATED                         STATUS          CHART                   APP VERSION     DESCRIPTION     
1               Sat Feb  3 16:44:00 2024        superseded      first-chart-0.1.0       1.16.0          Install complete
2               Sat Feb  3 16:51:58 2024        superseded      first-chart-0.1.0       1.16.0          Upgrade complete
3               Sat Feb  3 17:07:00 2024        deployed        first-chart-0.1.0       1.16.0          Upgrade complete
```

If you want to roll back to the previous revision, you run:

```shell
$ helm rollback first-chart
Rollback was a success! Happy Helming!
$ helm history first-chart 
REVISION        UPDATED                         STATUS          CHART                   APP VERSION     DESCRIPTION     
1               Sat Feb  3 16:44:00 2024        superseded      first-chart-0.1.0       1.16.0          Install complete
2               Sat Feb  3 16:51:58 2024        superseded      first-chart-0.1.0       1.16.0          Upgrade complete
3               Sat Feb  3 17:07:00 2024        superseded      first-chart-0.1.0       1.16.0          Upgrade complete
4               Sat Feb  3 21:36:36 2024        deployed        first-chart-0.1.0       1.16.0          Rollback to 2 
```

That succeeded. We can see that in the description of the last revision: `Rollback to 2`. If you want to roll back
to a certain revision, run:

```shell
$ helm rollback first-chart 1
Rollback was a success! Happy Helming!
$ helm history first-chart   
REVISION        UPDATED                         STATUS          CHART                   APP VERSION     DESCRIPTION     
1               Sat Feb  3 16:44:00 2024        superseded      first-chart-0.1.0       1.16.0          Install complete
2               Sat Feb  3 16:51:58 2024        superseded      first-chart-0.1.0       1.16.0          Upgrade complete
3               Sat Feb  3 17:07:00 2024        superseded      first-chart-0.1.0       1.16.0          Upgrade complete
4               Sat Feb  3 21:36:36 2024        superseded      first-chart-0.1.0       1.16.0          Rollback to 2   
5               Sat Feb  3 21:39:21 2024        deployed        first-chart-0.1.0       1.16.0          Rollback to 1  
```

Good job! Now you know how to roll back.

### Advanced features

#### Render a ConfigMap value dynamically with Helm templating

Let's learn how we can use the Helm templating system to create dynamic values in the final K8s objects. Let's do that
in our ConfigMap. Currently, it has a static name: `first-chart-configmap`. Let's add the chart version number to it.
That value is stored in the `Chart.yaml` file and right now that chart is the version 0.1.0. We could hard-code this
version in the ConfigMap name, but we want to update the chart version often, and we don't want to keep on changing
it manually in the name of the ConfigMap.

This is where Helm templating comes in handy. The templating engine will pull values from the `Chart.yaml`
and `values.yaml`. All you have to do is use the templating directive `{{ <something> }}`. To tell Helm to take the
value from `Chart.yaml` file, we reference the value with `{{.Chart.<key>}}`, in this case `{{.Chart.Version}}`. Both
are capitalized, because that is the convention in Go, the programming language the Helm is written in. So our ConfigMap
now looks like this:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: first-chart-configmap-{{.Chart.Version}}
...
```

Now let's upgrade our chart:

```shell
$ helm upgrade first-chart .
$ kubectl get cm
NAME                          DATA   AGE
first-chart-configmap-0.1.0   2      14s
```

Yay! We can see the new version in the name of the ConfigMap. Now change the version in `Chart.yaml` to `0.1.1` and
upgrade the chart:

```shell
$ helm upgrade first-chart .
$ kubectl get cm            
NAME                          DATA   AGE
first-chart-configmap-0.1.1   2      16s
```

The name of the config map has been updated! Great! Now you know how to pass a chart value to Helm via the
templating engine.

#### Using the values.yaml file

Like `Chart.yaml`, `values.yaml` is a builtin object in Helm. Meaning that the values in these files can automatically
be templated using the template directive syntax. The generated `values.yaml` files contains quite a few values
predefined, but these are just suggestions, so you can remove or add any values you like. For example if we wanted
to have some values to be passed for our staging environment, we could add some data like this to the `values.yaml`:
with this content:

```yaml
...
staging:
  sample-key: sample-12345
...
```

If we wanted to access that value in a template, we would use `{{ .Values.staging.sample-key }}`. When you deploy a
Helm chart, you can also pass values that will overwrite the values in the `values.yaml` from the chart.

#### Dynamically render a value with a Helm conditional statement

Like programming languages, the Helm templating system has conditionals, which allows you to render values dynamically,
whether a condition is met or not.

Imagine that you have two different environments. Staging is the place where developers can push commits and trigger
a set of automated tests to see if the application still works with their changes. And production, where your workloads
are handling actual traffic from your users and therefore doesn't need tests to run because the change has already been
approved by your CI/CD system. In this scenario we want the value of `allowTesting` to be true for staging and false
for production. The if-else statement is a Helm directive and each part of the statement, if, else, and end, begin
and end with double curly braces. Let's add those to the ConfigMap:

```yaml
...
data:
  port: "8080"
  {{if eq .Values.env "staging"}}
  allowTesting: "true"
  {{else}}
  allowTesting: "false"
  {{end}}
```

Also let's add to `values.yaml`:

```yaml
...
env: production
...
```

Let's see the change:

```shell
$ helm template first-chart .
...
---
## Source: first-chart/templates/cm.yaml
...
  allowTesting: "false"
```

Look at that! `allowTesting` got set to false. Now try setting `env: staging` in `values.yaml` and see what happens
with `allowTesting`.

#### Helm going forward

In conclusion, the idea of Helm is pretty simple: you put in `templates` files with any K8s objects you want to be
templated. In those you can use the Helm templating system to pass values from `values.yaml` and `Chart.yaml`.
If you know how to define a K8s object, you can add it to Helm. We've only tried a minor set of features of the Helm
templating systems: values and conditionals. But you can write more complicated code, like loops, or define your own
functions in `_helpers.tpl`.

Happy Helming!